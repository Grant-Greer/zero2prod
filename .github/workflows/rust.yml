name: Rust CI/CD Pipeline

# Trigger on push to main and all pull requests
on:
  push:
    branches: [ "main" ]
    tags: [ 'v*' ]  # Also trigger on version tags
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: "-Dwarnings"  # Treat warnings as errors
  RUST_BACKTRACE: 1        # Provide backtraces for crashes

jobs:
  # Test across different platforms and Rust versions
  test:
    name: Test Suite
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        rust: [stable, beta]
        include:
          - os: ubuntu-latest
            rust: nightly
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          
      - name: Build
        run: cargo build --verbose
        
      - name: Run tests
        run: cargo test --verbose
        
      # Generate and upload code coverage (Linux only)
      - name: Install cargo-tarpaulin
        if: matrix.os == 'ubuntu-latest' && matrix.rust == 'stable'
        run: cargo install cargo-tarpaulin
        
      - name: Generate coverage report
        if: matrix.os == 'ubuntu-latest' && matrix.rust == 'stable'
        run: cargo tarpaulin --out Xml

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.rust == 'stable'
        uses: codecov/codecov-action@v3

  # Formatting check
  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      - name: Enforce formatting
        run: cargo fmt --check

  # Linting
  clippy:
    name: Clippy
    needs: [fmt]  # Run after formatting check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-clippy-${{ hashFiles('**/Cargo.lock') }}
      - name: Linting
        run: cargo clippy --all-targets --all-features -- -D warnings

  # Security audit
  security_audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install cargo-audit
        run: cargo install cargo-audit
      - name: Run security audit
        run: cargo audit

  # Create release for tagged commits
  release:
    name: Create Release
    needs: [test, clippy, security_audit]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build Release
        run: cargo build --release
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            target/release/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
